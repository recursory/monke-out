[gd_resource type="VisualShader" load_steps=18 format=2]

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarUniform" id=13]
uniform_name = "speed"

[sub_resource type="VisualShaderNodeScalarOp" id=14]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=15]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=16]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=18]

[sub_resource type="VisualShaderNodeScalarOp" id=19]

[sub_resource type="VisualShaderNodeInput" id=2]
output_port_for_preview = 0
input_name = "time"

[sub_resource type="VisualShaderNodeScalarUniform" id=20]
uniform_name = "speed2"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeScalarOp" id=21]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=3]
function = 0

[sub_resource type="VisualShaderNodeColorUniform" id=4]
uniform_name = "red"
default_value_enabled = true
default_value = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeColorUniform" id=5]
output_port_for_preview = 0
uniform_name = "green"
default_value_enabled = true
default_value = Color( 0.227111, 0.883618, 0.249583, 1 )

[sub_resource type="VisualShaderNodeVectorInterp" id=6]

[sub_resource type="VisualShaderNodeVectorInterp" id=8]

[resource]
code = "shader_type canvas_item;
uniform vec4 green : hint_color = vec4(0.227111, 0.883618, 0.249583, 1.000000);
uniform vec4 red : hint_color = vec4(1.000000, 0.000000, 0.000000, 1.000000);
uniform float speed;
uniform float speed2 = 1;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:5
	vec3 n_out5p0 = green.rgb;
	float n_out5p1 = green.a;

// ColorUniform:4
	vec3 n_out4p0 = red.rgb;
	float n_out4p1 = red.a;

// ScalarUniform:13
	float n_out13p0 = speed;

// Input:2
	float n_out2p0 = TIME;

// ScalarOp:14
	float n_out14p0 = n_out13p0 * n_out2p0;

// ScalarUniform:20
	float n_out20p0 = speed2;

// Input:17
	vec3 n_out17p0 = vec3(SCREEN_UV, 0.0);

// VectorDecompose:18
	float n_out18p0 = n_out17p0.x;
	float n_out18p1 = n_out17p0.y;
	float n_out18p2 = n_out17p0.z;

// ScalarOp:21
	float n_out21p0 = n_out20p0 * n_out18p0;

// ScalarOp:19
	float n_out19p0 = n_out14p0 + n_out21p0;

// ScalarFunc:3
	float n_out3p0 = sin(n_out19p0);

// ScalarOp:15
	float n_in15p1 = 1.00000;
	float n_out15p0 = n_out3p0 + n_in15p1;

// ScalarOp:16
	float n_in16p1 = 2.00000;
	float n_out16p0 = n_out15p0 / n_in16p1;

// VectorMix:6
	vec3 n_out6p0 = mix(n_out5p0, n_out4p0, vec3(n_out16p0));

// VectorMix:8
	vec3 n_in8p1 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in8p2 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out8p0 = mix(n_out6p0, n_in8p1, n_in8p2);

// Output:0
	COLOR.rgb = n_out8p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 13.2411, 198.954 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 600, 60 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( 60, 120 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( 460, 340 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( 120, 20 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( 120, -80 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( 468.25, 39.25 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( 460, 160 )
nodes/fragment/11/node = SubResource( 11 )
nodes/fragment/11/position = Vector2( -340, 380 )
nodes/fragment/12/node = SubResource( 12 )
nodes/fragment/12/position = Vector2( -193.485, 370.785 )
nodes/fragment/13/node = SubResource( 13 )
nodes/fragment/13/position = Vector2( -200, 140 )
nodes/fragment/14/node = SubResource( 14 )
nodes/fragment/14/position = Vector2( 80, 260 )
nodes/fragment/15/node = SubResource( 15 )
nodes/fragment/15/position = Vector2( 280, 240 )
nodes/fragment/16/node = SubResource( 16 )
nodes/fragment/16/position = Vector2( 320, 240 )
nodes/fragment/17/node = SubResource( 17 )
nodes/fragment/17/position = Vector2( 80, 340 )
nodes/fragment/18/node = SubResource( 18 )
nodes/fragment/18/position = Vector2( 80, 380 )
nodes/fragment/19/node = SubResource( 19 )
nodes/fragment/19/position = Vector2( 320, 340 )
nodes/fragment/20/node = SubResource( 20 )
nodes/fragment/20/position = Vector2( 29.0027, 450.48 )
nodes/fragment/21/node = SubResource( 21 )
nodes/fragment/21/position = Vector2( 260, 440 )
nodes/fragment/connections = PoolIntArray( 5, 0, 6, 0, 4, 0, 6, 1, 6, 0, 8, 0, 8, 0, 0, 0, 13, 0, 14, 0, 2, 0, 14, 1, 3, 0, 15, 0, 15, 0, 16, 0, 16, 0, 6, 2, 17, 0, 18, 0, 19, 0, 3, 0, 18, 0, 21, 1, 14, 0, 19, 0, 21, 0, 19, 1, 20, 0, 21, 0 )
